{
    "code_generation": [
      {
        "level": 1,
        "prompt": "a basic Python function named `add` that takes two integers, `a` and `b`, and returns their sum.",
        "validation_test": "def test_add():\n assert add(2, 3) == 5\n assert add(-1, 1) == 0"
      },
      {
        "level": 2,
        "prompt": "a Python function named `is_palindrome` that takes a string and returns `True` if it's a palindrome and `False` otherwise. It should be case-insensitive and ignore spaces.",
        "validation_test": "def test_is_palindrome():\n assert is_palindrome('A man a plan a canal Panama') == True\n assert is_palindrome('hello') == False"
      },
      {
        "level": 3,
        "prompt": "a recursive Python function named `factorial` that calculates the factorial of a non-negative integer.",
        "validation_test": "def test_factorial():\n assert factorial(5) == 120\n assert factorial(0) == 1"
      },
      {
        "level": 4,
        "prompt": "a Python function named `fibonacci` that returns the `n`th Fibonacci number using memoization.",
        "validation_test": "def test_fibonacci():\n assert fibonacci(10) == 55\n assert fibonacci(1) == 1"
      },
      {
        "level": 5,
        "prompt": "a Python class `BankAccount` with `deposit`, `withdraw`, and `get_balance` methods. Balance should never go negative.",
        "validation_test": "def test_bank_account():\n acc = BankAccount()\n acc.deposit(100)\n acc.withdraw(30)\n assert acc.get_balance() == 70\n acc.withdraw(100)\n assert acc.get_balance() == 70"
      },
      {
        "level": 6,
        "prompt": "a Python function named `parse_csv` that takes a CSV string and returns a list of dictionaries assuming the first row is the header.",
        "validation_test": "def test_parse_csv():\n csv = 'name,age\\nAlice,30\\nBob,25'\n result = parse_csv(csv)\n assert result == [{'name': 'Alice', 'age': '30'}, {'name': 'Bob', 'age': '25'}]"
      },
      {
        "level": 7,
        "prompt": "a Python decorator named `timed` that prints the execution time of any function it decorates.",
        "validation_test": "import time\n@timed\ndef slow():\n time.sleep(0.1)\nslow()  # Should print execution time"
      }
    ],
    "json_adherence": [
      {
        "level": 1,
        "prompt": "Return a JSON object with two keys: 'name' set to 'The Giblet' and 'version' set to 0.1. Only return the JSON object, nothing else.",
        "validation_type": "is_json_exact",
        "expected_json": { "name": "The Giblet", "version": 0.1 }
      },
      {
        "level": 2,
        "prompt": "Return a JSON object with nested structure: a key 'metadata' with 'author' as 'GibletAI' and 'version' as '1.0'.",
        "validation_type": "is_json_exact",
        "expected_json": { "metadata": { "author": "GibletAI", "version": "1.0" } }
      },
      {
        "level": 3,
        "prompt": "Return a JSON array of 3 objects, each representing a user with 'id', 'name', and 'active' boolean fields.",
        "validation_type": "is_json_exact",
        "expected_json": [
          { "id": 1, "name": "Alice", "active": true },
          { "id": 2, "name": "Bob", "active": false },
          { "id": 3, "name": "Charlie", "active": true }
        ]
      }
    ]
  }
  